version: "3.4"

services:
  db:
    # use lowest supported version for dev to check compatibility
    image: postgres:${POSTGRES_IMAGE_VERSION:-12}
    ports:
      - "${HOST_PUBLISH_IP:-127.0.0.1}:${POSTGRES_PORT:-5432}:5432"
    command: "${POSTGRES_DEV_EXTRA_ARGS}"

  redis:
    ports:
      - "${HOST_PUBLISH_IP:-127.0.0.1}:${DEBUG_REDIS_PORT:-6379}:6379"

  # Override with the dev caddy file which switches Caddy to only be the media file
  # server in the dev env. Devs will instead directly connect to the backend and
  # web frontend services.
  caddy:
    volumes:
      - $PWD/Caddyfile.dev:/etc/caddy/Caddyfile

  backend:
    image: fwego_backend_dev:latest
    environment:
      - FWEGO_BACKEND_DEBUGGER_ENABLED=${FWEGO_BACKEND_DEBUGGER_ENABLED:-True}
      - FWEGO_BACKEND_DEBUGGER_PORT=${FWEGO_BACKEND_DEBUGGER_PORT:-5678}
      - FWEGO_DANGEROUS_SILKY_ANALYZE_QUERIES
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    build:
      dockerfile: ./backend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    ports:
      - "${HOST_PUBLISH_IP:-127.0.0.1}:8000:8000"
      - "${HOST_PUBLISH_IP:-127.0.0.1}:${FWEGO_BACKEND_DEBUGGER_PORT:-5678}:${FWEGO_BACKEND_DEBUGGER_PORT:-5678}"
    volumes:
      - ./backend:/fwego/backend
      - ./premium/backend/:/fwego/premium/backend
      - ./enterprise/backend/:/fwego/enterprise/backend
      - ./deploy/plugins/install_plugin.sh:/fwego/plugins/install_plugin.sh
      - ./tests:/fwego/tests
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true
    depends_on:
      - otel-collector

  web-frontend:
    image: fwego_web-frontend_dev:latest
    build:
      dockerfile: ./web-frontend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    ports:
      - "${HOST_PUBLISH_IP:-127.0.0.1}:3000:3000"
    volumes:
      - ./web-frontend:/fwego/web-frontend
      # Override the above mounts for node_modules so we use the node_modules built
      # directly into the image instead of whatever is on your local filesystem.
      - /fwego/web-frontend/node_modules
      - ./premium/web-frontend/:/fwego/premium/web-frontend
      - ./enterprise/web-frontend/:/fwego/enterprise/web-frontend
      - ./tests/:/fwego/tests
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true

  web-frontend-storybook:
    image: fwego_web-frontend_dev:latest
    restart: unless-stopped
    environment:
      FEATURE_FLAGS:
    networks:
      local:
    build:
      dockerfile: ./web-frontend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    command: "storybook-dev"
    ports:
      - "${HOST_PUBLISH_IP:-127.0.0.1}:6006:6006"
    volumes:
      - ./web-frontend:/fwego/web-frontend
      # Override the above mounts for node_modules so we use the node_modules built
      # directly into the image instead of whatever is on your local filesystem.
      - /fwego/web-frontend/node_modules
      - ./premium/web-frontend/:/fwego/premium/web-frontend
      - ./enterprise/web-frontend/:/fwego/enterprise/web-frontend
      - ./tests/:/fwego/tests
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true

  celery:
    image: fwego_backend_dev:latest
    build:
      dockerfile: ./backend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    command: "watch-py celery-worker"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - FWEGO_DANGEROUS_SILKY_ANALYZE_QUERIES
    volumes:
      - ./backend:/fwego/backend
      - ./premium/backend/:/fwego/premium/backend
      - ./enterprise/backend/:/fwego/enterprise/backend
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true
    depends_on:
      - otel-collector

  celery-export-worker:
    image: fwego_backend_dev:latest
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - FWEGO_DANGEROUS_SILKY_ANALYZE_QUERIES
    build:
      dockerfile: ./backend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    command: "watch-py celery-exportworker"
    volumes:
      - ./backend:/fwego/backend
      - ./premium/backend/:/fwego/premium/backend
      - ./enterprise/backend/:/fwego/enterprise/backend
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true
    depends_on:
      - otel-collector

  celery-beat-worker:
    image: fwego_backend_dev:latest
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    build:
      dockerfile: ./backend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    command: "watch-py celery-beat"
    volumes:
      - ./backend:/fwego/backend
      - ./premium/backend/:/fwego/premium/backend
      - ./enterprise/backend/:/fwego/enterprise/backend
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true

  celery-flower:
    image: fwego_backend_dev:latest
    build:
      dockerfile: ./backend/Dockerfile
      context: .
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
    restart: unless-stopped
    stop_signal: SIGQUIT
    environment:
      REDIS_HOST:
      REDIS_PORT:
      REDIS_PROTOCOL:
      REDIS_URL:
      REDIS_USER:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?}
    depends_on:
      - backend
    volumes:
      - media:/fwego/media
    ports:
      - "5555:5555" # web ui
    command: "celery-flower"
    networks:
      local:
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true

  mjml-email-compiler:
    build:
      target: dev
      args:
        # We allow configuring the UID/GID here so you can run as the dev's actual user
        # reducing the chance the containers screw up the bind mounted folders.
        UID: $UID
        GID: $GID
      context: .
      dockerfile: ./web-frontend/Dockerfile
    image: fwego_web-frontend:latest
    command: "bash -c 'cd /fwego/backend/email_compiler/ && yarn install && yarn run watch'"
    volumes:
      - ./backend:/fwego/backend
    # Open stdin and tty so when attaching key input works as expected.
    stdin_open: true
    tty: true

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: "none" # disable saving logs
    ports:
      - "8025:8025" # web ui
    networks:
      local:

  # When switching between dev and local the media files in the media volume will be
  # owned by different users. Ensure that we chown them to the user appropriate for the
  # environment here.
  volume-permissions-fixer:
    image: bash:4.4
    command: chown ${UID:-1000}:${GID:-1000} -R /fwego/media
    volumes:
      - media:/fwego/media
      - caddy_config:/config
      - caddy_data:/data
    networks:
      local:

  otel-collector:
    image: otel/opentelemetry-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    environment:
      HONEYCOMB_API_KEY:
      HONEYCOMB_METRICS_DATASET: fwego-dev-metrics
    volumes:
      - $PWD/deploy/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      local:
    ports:
      - "4318:4318"
